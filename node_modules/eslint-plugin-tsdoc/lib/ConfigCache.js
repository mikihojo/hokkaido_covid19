"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tsdoc_config_1 = require("@microsoft/tsdoc-config");
var path = require("path");
var Debug_1 = require("./Debug");
// How often to check for modified input files.  If a file's modification timestamp has changed, then we will
// evict the cache entry immediately.
var CACHE_CHECK_INTERVAL_MS = 3 * 1000;
// Evict old entries from the cache after this much time, regardless of whether the file was detected as being
// modified or not.
var CACHE_EXPIRE_MS = 20 * 1000;
// If this many objects accumulate in the cache, then it is cleared to avoid a memory leak.
var CACHE_MAX_SIZE = 100;
var ConfigCache = /** @class */ (function () {
    function ConfigCache() {
    }
    /**
     * Node.js equivalent of performance.now().
     */
    ConfigCache._getTimeInMs = function () {
        var _a = process.hrtime(), seconds = _a[0], nanoseconds = _a[1];
        return seconds * 1000 + nanoseconds / 1000000;
    };
    ConfigCache.getForSourceFile = function (sourceFilePath) {
        var sourceFileFolder = path.dirname(path.resolve(sourceFilePath));
        // First, determine the file to be loaded. If not found, the configFilePath will be an empty string.
        var configFilePath = tsdoc_config_1.TSDocConfigFile.findConfigPathForFolder(sourceFileFolder);
        // If configFilePath is an empty string, then we'll use the folder of sourceFilePath as our cache key
        // (instead of an empty string)
        var cacheKey = configFilePath || (sourceFileFolder + '/');
        Debug_1.Debug.log("Cache key: \"" + cacheKey + "\"");
        var nowMs = ConfigCache._getTimeInMs();
        var cachedConfig = undefined;
        // Do we have a cached object?
        cachedConfig = ConfigCache._cachedConfigs.get(cacheKey);
        if (cachedConfig) {
            Debug_1.Debug.log('Cache hit');
            // Is the cached object still valid?
            var loadAgeMs = nowMs - cachedConfig.loadTimeMs;
            var lastCheckAgeMs = nowMs - cachedConfig.lastCheckTimeMs;
            if (loadAgeMs > CACHE_EXPIRE_MS || loadAgeMs < 0) {
                Debug_1.Debug.log('Evicting because item is expired');
                cachedConfig = undefined;
                ConfigCache._cachedConfigs.delete(cacheKey);
            }
            else if (lastCheckAgeMs > CACHE_CHECK_INTERVAL_MS || lastCheckAgeMs < 0) {
                Debug_1.Debug.log('Checking for modifications');
                cachedConfig.lastCheckTimeMs = nowMs;
                if (cachedConfig.configFile.checkForModifiedFiles()) {
                    // Invalidate the cache because it failed to load completely
                    Debug_1.Debug.log('Evicting because item was modified');
                    cachedConfig = undefined;
                    ConfigCache._cachedConfigs.delete(cacheKey);
                }
            }
        }
        // Load the object
        if (!cachedConfig) {
            if (ConfigCache._cachedConfigs.size > CACHE_MAX_SIZE) {
                Debug_1.Debug.log('Clearing cache');
                ConfigCache._cachedConfigs.clear(); // avoid a memory leak
            }
            var configFile = tsdoc_config_1.TSDocConfigFile.loadFile(configFilePath);
            if (configFile.fileNotFound) {
                Debug_1.Debug.log("File not found: \"" + configFilePath + "\"");
            }
            else {
                Debug_1.Debug.log("Loaded: \"" + configFilePath + "\"");
            }
            cachedConfig = {
                configFile: configFile,
                lastCheckTimeMs: nowMs,
                loadTimeMs: nowMs
            };
            ConfigCache._cachedConfigs.set(cacheKey, cachedConfig);
        }
        return cachedConfig.configFile;
    };
    // findConfigPathForFolder() result --> loaded tsdoc.json configuration
    ConfigCache._cachedConfigs = new Map();
    return ConfigCache;
}());
exports.ConfigCache = ConfigCache;
